"use strict";(self.webpackChunkmy_blog=self.webpackChunkmy_blog||[]).push([[271],{3905:(e,n,r)=>{r.d(n,{Zo:()=>s,kt:()=>f});var t=r(7294);function i(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function c(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function a(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?c(Object(r),!0).forEach((function(n){i(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):c(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function l(e,n){if(null==e)return{};var r,t,i=function(e,n){if(null==e)return{};var r,t,i={},c=Object.keys(e);for(t=0;t<c.length;t++)r=c[t],n.indexOf(r)>=0||(i[r]=e[r]);return i}(e,n);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(t=0;t<c.length;t++)r=c[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var o=t.createContext({}),d=function(e){var n=t.useContext(o),r=n;return e&&(r="function"==typeof e?e(n):a(a({},n),e)),r},s=function(e){var n=d(e.components);return t.createElement(o.Provider,{value:n},e.children)},y="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},u=t.forwardRef((function(e,n){var r=e.components,i=e.mdxType,c=e.originalType,o=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),y=d(r),u=i,f=y["".concat(o,".").concat(u)]||y[u]||p[u]||c;return r?t.createElement(f,a(a({ref:n},s),{},{components:r})):t.createElement(f,a({ref:n},s))}));function f(e,n){var r=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var c=r.length,a=new Array(c);a[0]=u;var l={};for(var o in n)hasOwnProperty.call(n,o)&&(l[o]=n[o]);l.originalType=e,l[y]="string"==typeof e?e:i,a[1]=l;for(var d=2;d<c;d++)a[d]=r[d];return t.createElement.apply(null,a)}return t.createElement.apply(null,r)}u.displayName="MDXCreateElement"},3850:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>p,frontMatter:()=>c,metadata:()=>l,toc:()=>d});var t=r(7462),i=(r(7294),r(3905));const c={},a=void 0,l={permalink:"/blog/2024/08/15/ \u6811\u76f8\u5173\u51fd\u6570\u7684\u5b9e\u73b0\u548cts\u5c01\u88c5",source:"@site/blog/2024-08-15 \u6811\u76f8\u5173\u51fd\u6570\u7684\u5b9e\u73b0\u548cts\u5c01\u88c5.md",title:" \u6811\u76f8\u5173\u51fd\u6570\u7684\u5b9e\u73b0\u548cts\u5c01\u88c5",description:"\u4e0b\u9762\u7684\u5185\u5bb9\u5173\u4e8e\u5c01\u88c5\u7684\u6811\u7684\u90e8\u5206\u64cd\u4f5c\u7684\u5de5\u5177\u7c7b\uff0c\u5e73\u94fa\u6811\u8f6c tree\uff0c\u6811\u8f6c\u5e73\u94fa\u3001\u6811\u7684\u904d\u5386\u3001\u67e5\u627e\u3001\u7b5b\u9009\u7b49\u3002",date:"2024-08-15T00:00:00.000Z",formattedDate:"2024\u5e748\u670815\u65e5",tags:[],readingTime:8.66,hasTruncateMarker:!1,authors:[],frontMatter:{},nextItem:{title:"pnpm \u5b89\u88c5\uff0c\u62a5\u9519\u672c\u5730\u670d\u52a1\u5f02\u5e38",permalink:"/blog/2024/1/9/ pnpm\u5b89\u88c5\uff0c\u62a5\u9519\u672c\u5730\u670d\u52a1\u5f02\u5e38"}},o={authorsImageUrls:[]},d=[{value:"\u6811\u7684\u81ea\u5b9a\u4e49\u7ed3\u6784",id:"\u6811\u7684\u81ea\u5b9a\u4e49\u7ed3\u6784",level:3},{value:"\u5b9e\u73b0",id:"\u5b9e\u73b0",level:3}],s={toc:d},y="wrapper";function p(e){let{components:n,...r}=e;return(0,i.kt)(y,(0,t.Z)({},s,r,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"\u4e0b\u9762\u7684\u5185\u5bb9\u5173\u4e8e\u5c01\u88c5\u7684\u6811\u7684\u90e8\u5206\u64cd\u4f5c\u7684\u5de5\u5177\u7c7b\uff0c\u5e73\u94fa\u6811\u8f6c tree\uff0c\u6811\u8f6c\u5e73\u94fa\u3001\u6811\u7684\u904d\u5386\u3001\u67e5\u627e\u3001\u7b5b\u9009\u7b49\u3002"),(0,i.kt)("h3",{id:"\u6811\u7684\u81ea\u5b9a\u4e49\u7ed3\u6784"},"\u6811\u7684\u81ea\u5b9a\u4e49\u7ed3\u6784"),(0,i.kt)("p",null,"treeCreate \u51fd\u6570\u63a5\u53d7\u4e00\u4e2a\u5e73\u94fa\u6570\u7ec4\uff0c\u5176\u4e2d\u5e73\u94fa\u6570\u7ec4\u4e2d\u7684\u8282\u70b9\u6570\u636e\u7ed3\u6784\u603b\u662f\u53ef\u53d8\u7684\uff0c\u4e3a\u4e86\u6ee1\u8db3\u8fd9\u4e2a\u51fd\u6570\u80fd\u591f\u4f5c\u4e3a\u901a\u7528\u51fd\u6570\u4f7f\u7528\uff0c\u5728\u51fd\u6570\u53c2\u6570\u4e2d\u63d0\u4f9b\u4e86\u914d\u7f6e\u9879\uff0c\u5176\u4e2d id \u548c faId \u4e3a\u6811\u8282\u70b9\u7684 id \u548c\u7236\u8282\u70b9 id\uff0cchildren \u4e3a\u5b50\u8282\u70b9\u7684\u5c5e\u6027\u540d\u3002",(0,i.kt)("strong",{parentName:"p"},"\u5176\u4e2d ts \u7c7b\u578b\u662f\u6bd4\u8f83\u5b8c\u5584\u7684\uff0c\u4f60\u80fd\u591f\u63d0\u4f9b\u6cdb\u578b\u53bb\u7ea6\u675f\u6811\u8282\u70b9\u7c7b\u578b\uff0c\u4e5f\u53ef\u4ee5\u4e0d\u63d0\u4f9b\u6cdb\u578b\uff0c\u8ba9\u5176\u81ea\u52a8\u8bc6\u522b\u5b50\u8282\u70b9\u7c7b\u578b\uff0c\u4ece\u800c\u63d0\u4f9b\u914d\u7f6e\u9879\u4e2d\u503c\u7684\u81ea\u52a8\u5224\u65ad\u3002")),(0,i.kt)("h3",{id:"\u5b9e\u73b0"},"\u5b9e\u73b0"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},'enum TreeNodeTypeKeyEnum {\n    id = "id",\n    faId = "faId",\n    children = "children",\n}\n\n/** \u9ed8\u8ba4\u8282\u70b9\u53c2\u6570\u6570\u636e\u7c7b\u578b */\nexport type TreeNodeItemType = {\n    id: TreeNodeTypeKeyEnum.id;\n    faId: TreeNodeTypeKeyEnum.faId;\n    children: TreeNodeTypeKeyEnum.children;\n};\n\n/** \u6784\u5efa\u6811\u51fd\u6570\u914d\u7f6e\u9879 */\ntype TreeCreateConfig<T extends Record<string, string>> = {\n    keyMapping: Partial<Record<keyof Pick<TreeNodeItemType, "id" | "faId" | "children">, keyof T>>;\n};\n\n/** \u68c0\u67e5\u662f\u5426\u662f\u53ef\u7d22\u5f15\u7c7b\u578b */\nconst checkIndexType = (data: any) => {\n    return ["string", "number", "symbol"].includes(typeof data);\n};\n\n/** \u6811\u539f\u578b\u7c7b\u578b */\ntype TreePrototypeType<T> = {\n    treeForEach: (callback?: (item: T) => void) => ReturnType<typeof treeDFS<T>>;\n    treeFind: (callback?: (item: T) => boolean) => ReturnType<typeof treeFind<T>>;\n    treeFilter: (\n        callback?: (item: T) => boolean,\n        config?: {\n            isSearch?: boolean;\n        }\n    ) => ReturnType<typeof treeFilter<T>>;\n};\n\n/** key\u4e3aK\u7c7b\u578b\u4e2d\u6240\u6709\u7684key\uff0c\u4ee5K[key]\u4f5c\u4e3a\u7d22\u5f15\uff0c\u7528\u7d22\u5f15\u4f5c\u4e3akey\u53d6T\u4e2d\u5bf9\u5e94key\u7684\u7c7b\u578b\uff0c\u8be5\u7c7b\u578b\u5219\u4e3aK[key]\u7684\u7c7b\u578b */\ntype TypeToRecord<T extends Record<string, any>, K extends Record<string, string>> = {\n    [key in keyof K as K[key]]: T[K[key]];\n};\n\n/**\n *\u3010\u6811\u7684\u81ea\u5b9a\u4e49\u952e\u914d\u7f6e\u3011\n */\ntype TreeTypeWithouPrototype<T extends Record<string, any>, K extends Record<string, string>> = K extends {\n    children: string;\n}\n    ? TypeToRecord<T, K>\n    : TypeToRecord<T, K> & { children: TreeType<T, K> };\n\n/**\n * \u3010\u6811\u7ed3\u6784\u7c7b\u578b\u3011\n *\n * T\uff1a\u6811\u8282\u70b9\u7684\u7c7b\u578b\n *\n * K\uff1a\u81ea\u5b9a\u4e49\u952e\n *\n * \u5982\u679c K \u4e2d\u6ca1\u6709\u6307\u5b9achildren\uff0c\u5219\u6700\u7ec8\u8fd4\u56de\u7684\u7c7b\u578b\u4f1a\u5305\u542bchildren\uff1b\n *\n * \u5982\u679cK\u4e2d\u6307\u5b9a\u4e86children\uff0c\u6700\u7ec8\u8fd4\u56de\u7c7b\u578b\u5c06\u6ca1\u6709children\uff0c\u800c\u662f K \u7c7b\u578b\u4e2dchildren\u5bf9\u5e94\u503c\u7684\u7c7b\u578b\u3002\n */\ntype TreeType<T extends Record<string, any>, K extends Record<string, any>> = TreeTypeWithouPrototype<T, K>[] & TreePrototypeType<TreeTypeWithouPrototype<T, K>>;\n\n/**\n * \u5e73\u94fa\u6570\u7ec4\u8f6c\u5316\u6210\u6811\n * @param arr \u5e73\u94fa\u6570\u7ec4\n * @param keyMapping \u4f7f\u7528\u81ea\u5b9a\u4e49\u7684key\u6765\u4f5c\u4e3a\u8282\u70b9\u6570\u636e\u4e2d\u7684id\u548cfaId\n * @returns\n */\nexport function treeCreate<T extends Record<string, any>, K extends TreeCreateConfig<T>["keyMapping"]>(_arr: T[], keyMapping: K): TreeType<T, K> {\n    const arrData = _arr.slice();\n\n    /** id\u3001faId\u3001children\u7684key */\n    const customInfo = {\n        idKey: (keyMapping.id ? keyMapping.id : TreeNodeTypeKeyEnum.id) as string,\n        faIdKey: (keyMapping.faId ? keyMapping.faId : TreeNodeTypeKeyEnum.faId) as string,\n        childrenKey: (keyMapping.children ? keyMapping.children : TreeNodeTypeKeyEnum.children) as string,\n    };\n\n    /** \u83b7\u53d6\u5230\u6570\u636e\u7684id\u503c */\n    const getId = (data: T): string | null => {\n        // \u5224\u65ad\u662f\u5426\u6709keyMapping\u4e2d\u7684id\uff0c\u5982\u679c\u6709\n        const id: string = (data as any)[customInfo.idKey];\n\n        if (!checkIndexType(id)) return null;\n        return id;\n    };\n\n    /** \u83b7\u53d6\u5230\u6570\u636e\u7684id\u503c */\n    const getFaId = (data: T): string | null => {\n        const faId: string = (data as any)[customInfo.faIdKey];\n\n        if (!checkIndexType(faId)) return null;\n        return faId;\n    };\n\n    /** \u83b7\u53d6\u5230\u6570\u636e\u7684children\u503c */\n    const getChildren = (data: T) => {\n        const children = (data as any)[customInfo.childrenKey];\n        if (!(children instanceof Array)) return null;\n        return children;\n    };\n\n    /** \u6784\u5efa\u6811*/\n    const buildTree = () => {\n        const tree = bindTreeFunction([]);\n        const treeMap = new Map<string, T>();\n\n        arrData.forEach((item) => {\n            const id = getId(item);\n            const faId = getFaId(item);\n            const children = bindTreeFunction(getChildren(item) || []);\n\n            if (id) {\n                treeMap.set(id, {\n                    [customInfo.idKey]: id,\n                    [customInfo.faIdKey]: faId,\n                    [customInfo.childrenKey]: children,\n                } as unknown as T);\n            }\n        });\n\n        for (let i = 0; i < arrData.length; i++) {\n            const item = arrData[i];\n            const faId = getFaId(item);\n            const id = getId(item);\n\n            if (!id || !faId) continue;\n\n            const node = treeMap.get(id);\n            const father = treeMap.get(faId);\n            // \u904d\u5386\u6bcf\u4e00\u4e2a\u8282\u70b9\n            if (node) {\n                if (!father) {\n                    tree.push(node);\n                } else {\n                    const children = getChildren(father);\n                    if (!(children instanceof Array)) {\n                        throw new Error(`\'${customInfo.childrenKey}\'\u7684\u503c\u4e0d\u662f\u4e00\u4e2a\u6570\u7ec4`);\n                    }\n                    children.push(node);\n                }\n            }\n        }\n\n        return tree;\n    };\n\n    /** \u7ed1\u5b9a\u539f\u578b\u51fd\u6570 */\n    const bindTreeFunction = (tree: TreeType<T, K>[]) => {\n        const childrenKey = customInfo.childrenKey as keyof TreeType<T, K>;\n\n        const prototypeFun: TreePrototypeType<TreeType<T, K>> = {\n            treeForEach: (callback) =>\n                treeDFS(tree, callback, {\n                    childrenKey,\n                }),\n            treeFind: (callback) =>\n                treeFind(tree, callback, {\n                    childrenKey,\n                }),\n            treeFilter: (callback, config) =>\n                treeFilter(tree, callback, {\n                    ...config,\n                    childrenKey,\n                }),\n        };\n\n        const res = Object.create(Array.prototype, Object.getOwnPropertyDescriptors(prototypeFun));\n        return Object.setPrototypeOf(tree, res);\n    };\n\n    return buildTree();\n}\n\n/**\n * \u6df1\u5ea6\u4f18\u5148\u904d\u5386\n * @param tree \u6811\u6570\u636e\n * @param callback \u904d\u5386\u5230\u6bcf\u4e2a\u5143\u7d20\u65f6\u7684\u56de\u8c03\uff0c\u53c2\u6570\u4e3a\u8282\u70b9\n * @param config.childrenKey\n */\nexport function treeDFS<T>(tree: T[], callback?: (item: T) => void, config?: { childrenKey?: keyof T }): void {\n    const childrenKey = config?.childrenKey || "children";\n\n    /** \u4f20\u9012\u8282\u70b9 \u83b7\u53d6\u5230children\u7684\u5f15\u7528 */\n\n    const getChildren = (item: T) => {\n        const children = (item as any)[childrenKey];\n        if (!(children instanceof Array)) {\n            throw new Error("\u6ca1\u6709children\u5b57\u6bb5\uff0c\u6216\u5728\u914d\u7f6e\u9879\u53c2\u6570\u4e2d\u6307\u5b9achildrenKey\u4e3achildren\u7684key");\n        }\n        return children;\n    };\n\n    const list = tree.slice();\n    let current: T | undefined;\n\n    while ((current = list.shift())) {\n        callback && callback(current);\n\n        const currentChildren = getChildren(current);\n\n        if (currentChildren.length !== 0) {\n            list.unshift(...currentChildren);\n        }\n    }\n}\n\n/**\n *\n * @param tree \u6811\u6570\u636e\n * @param callback \u56de\u8c03\u51fd\u6570\uff0c\u8fd4\u56de\u503c\u4e3aboolean\uff0c\u53c2\u6570\u63a5\u6536\u8282\u70b9\u7c7b\u578b\n * @param confi.childrenKey\n * @returns callback\u4e3atrue\u65f6\u8fd4\u56de\u7684\u8282\u70b9\uff0c\u5982\u679c\u6ca1\u6709\u7b26\u5408callback\u7684\u8282\u70b9\u5219\u8fd4\u56denull\n */\nexport function treeFind<T>(\n    tree: T[],\n    callback?: (item: T) => boolean,\n    config?: {\n        childrenKey?: keyof T;\n    }\n): T | null {\n    const { childrenKey } = config || {};\n\n    /** \u4f20\u9012\u8282\u70b9 \u83b7\u53d6\u5230children\u7684\u5f15\u7528 */\n    const getChildren = (item: T) => {\n        const children = (item as any)[childrenKey || "children"];\n        if (!(children instanceof Array)) {\n            throw new Error("\u6ca1\u6709children\u5b57\u6bb5\uff0c\u6216\u5728\u914d\u7f6e\u9879\u53c2\u6570\u4e2d\u6307\u5b9achildrenKey\u4e3achildren\u7684key");\n        }\n        return children;\n    };\n\n    const list = tree.slice();\n    let current: T | undefined;\n\n    while ((current = list.shift())) {\n        const children = getChildren(current);\n\n        if (callback && callback(current)) {\n            // \u7b26\u5408\u7b5b\u9009callback\u6761\u4ef6\u7684\u8fd4\u56de\n            return current;\n        } else {\n            if (children.length !== 0) {\n                list.unshift(...children);\n            }\n        }\n    }\n\n    return null;\n}\n\n/**\n * @param tree \u6811\u6570\u636e\n * @param callback \u8fc7\u6ee4\u56de\u8c03\u51fd\u6570\n * @param config.isSearch\n * \u4e3atrue\u65f6\uff0c\u641c\u7d22\u8fc7\u6ee4\uff0c\u641c\u7d22\u51fa\u8282\u70b9\uff0c\u4fdd\u7559\u4e0d\u7b26\u5408\u6761\u4ef6\u7684\u7236\u8282\u70b9\u3002\n *\n * \u4e3afalse\u65f6\uff0c\u5b50\u6811\u8fc7\u6ee4\uff0c\u4e0d\u7b26\u5408callback\u7684\u8282\u70b9\u4ee5\u53ca\u5b50\u8282\u70b9\u90fd\u820d\u5f03\u3002\n * @param config.childrenKey \u6811\u4e2d\u8282\u70b9\u7528\u6765\u5d4c\u5957\u5b50\u8282\u70b9\u7684children\u7684key\n * @returns \u8282\u70b9\u6570\u7ec4\n */\nexport function treeFilter<T>(\n    tree: T[],\n    callback?: (item: T) => boolean,\n    config?: {\n        isSearch?: boolean;\n        childrenKey?: keyof T;\n    }\n): T[] {\n    const { childrenKey } = config || {};\n\n    /** \u4f20\u9012\u8282\u70b9 \u83b7\u53d6\u5230children\u7684\u5f15\u7528 */\n    const getChildren = (item: T) => {\n        const children = (item as any)[childrenKey || "children"];\n        if (!(children instanceof Array)) {\n            throw new Error();\n        }\n        return children;\n    };\n\n    const { isSearch } = config || {};\n    const filterTarget: T[] = [];\n\n    const list = tree.slice();\n    let current: T | undefined;\n\n    // \u672a\u4f20\u9012callback\u65f6\uff0c\u8fd4\u56de\u7a7a\u6570\u7ec4\n    if (!callback) return [];\n\n    while ((current = list.shift())) {\n        const children = getChildren(current);\n\n        const filteredChildren = treeFilter(children, callback, {\n            ...config,\n            isSearch: true,\n        });\n\n        // \u641c\u7d22\u8fc7\u6ee4\uff0c\u53ea\u8981\u5b50\u8282\u70b9\u6ee1\u8db3\uff0c\u5219\u6240\u6709\u7236\u7ea7\u8282\u70b9\u90fd\u4fdd\u7559\n        if (isSearch) {\n            if (filteredChildren.length > 0 || callback(current)) {\n                filterTarget.push({\n                    ...current,\n                    [childrenKey as string]: filteredChildren,\n                });\n            }\n        } else {\n            // \u5b50\u6811\u8fc7\u6ee4\uff0c\u8282\u70b9\u4e0d\u6ee1\u8db3\u5219\u820d\u5f03\u6240\u6709\u5b50\u8282\u70b9\n            if (callback(current)) {\n                filterTarget.push({\n                    ...current,\n                    [childrenKey as string]: filteredChildren,\n                });\n            }\n        }\n    }\n\n    return filterTarget;\n}\n')),(0,i.kt)("p",null,"\u4e0b\u9762\u662f\u4f7f\u7528\u3002",(0,i.kt)("strong",{parentName:"p"},"\u5728 createTree \u751f\u6210\u7684\u8282\u70b9\u4e2d\uff0c\u4f1a\u5728\u539f\u578b\u4e0a\u7ed1\u5b9a treeForeach\u3001treeFind\u3001treeFilter \u65b9\u6cd5\uff0c\u5728\u539f\u578b\u4e0a\u8c03\u7528\u65f6\u4f1a\u5229\u7528 ts \u7c7b\u578b\u7b80\u5316\u4e00\u4e9b\u4f8b\u5982 childrenKey \u7684\u914d\u7f6e\u9879\u7684\u4f20\u9012\u3002")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},'const nodes = [\n    {\n        code: "7zwqkfyqshl",\n        facode: "0",\n    },\n    {\n        code: "zzuuldvpbbc",\n        facode: "7zwqkfyqshl",\n    },\n];\nconst targetTree = treeCreate(nodes, {\n    id: "code",\n    faId: "facode",\n});\n\nconsole.log("@@", targetTree);\n\n// ------ \u6811\u904d\u5386\nlet count = 0;\ntreeDFS(\n    targetTree,\n    (item) => {\n        count++;\n        item;\n    },\n    {\n        childrenKey: "test",\n    }\n);\n\ntargetTree.treeForEach((item) => {\n    count++;\n    item;\n});\nconsole.log("2. \u6811\u904d\u5386", count);\n\n// ------ \u6811\u67e5\u627e\nconsole.log("3. \u6811\u67e5\u627e");\ntreeFind(\n    targetTree,\n    (item) => {\n        return item.code.includes("f");\n    },\n    {\n        childrenKey: "test",\n    }\n);\n\nconst findTarget = targetTree.treeFind((item) => {\n    return item.code.includes("f");\n});\nconsole.log(findTarget, findTarget?.code);\n\n// ------ \u6811\u8fc7\u6ee4\n// \u5b50\u6811\u8fc7\u6ee4\ntargetTree.treeFilter((item) => {\n    return item.code.includes("f");\n});\n\n// \u641c\u7d22\u8fc7\u6ee4\nconst filterTarget = treeFilter(\n    targetTree,\n    (item) => {\n        return item.code.includes("f");\n    },\n    {\n        isSearch: true,\n        childrenKey: "test",\n    }\n);\nconsole.log("4. \u6811\u8fc7\u6ee4", filterTarget);\n')))}p.isMDXComponent=!0}}]);